<?xml version="1.0" encoding="UTF-8"?>
<spirit:design xmlns:xilinx="http://www.xilinx.com" xmlns:spirit="http://www.spiritconsortium.org/XMLSchema/SPIRIT/1685-2009" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <spirit:vendor>xilinx.com</spirit:vendor>
  <spirit:library>xci</spirit:library>
  <spirit:name>unknown</spirit:name>
  <spirit:version>1.0</spirit:version>
  <spirit:componentInstances>
    <spirit:componentInstance>
      <spirit:instanceName>fpgadrv_axi_pcie_0_0</spirit:instanceName>
      <spirit:componentRef spirit:vendor="xilinx.com" spirit:library="ip" spirit:name="axi_pcie" spirit:version="2.9"/>
      <spirit:configurableElementValues>
        <spirit:configurableElementValue spirit:referenceId="ADDRBLOCK_RANGE.S_AXI.BAR0">4G</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="ADDRBLOCK_RANGE.S_AXI.BAR1">4G</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="ADDRBLOCK_RANGE.S_AXI.BAR2">4G</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="ADDRBLOCK_RANGE.S_AXI.BAR3">4G</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="ADDRBLOCK_RANGE.S_AXI.BAR4">4G</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="ADDRBLOCK_RANGE.S_AXI.BAR5">4G</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="ADDRBLOCK_RANGE.S_AXI_CTL.CTL0">256M</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK.ASSOCIATED_PORT"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK.CLK_DOMAIN"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK.FREQ_TOLERANCE_HZ">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK.INSERT_VIP">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK.PHASE">0.0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK_OUT.ASSOCIATED_PORT"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK_OUT.ASSOCIATED_RESET"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK_OUT.CLK_DOMAIN">fpgadrv_axi_pcie_0_0_axi_aclk_out</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK_OUT.FREQ_HZ">125000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK_OUT.FREQ_TOLERANCE_HZ">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK_OUT.INSERT_VIP">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK_OUT.PHASE">0.0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK.ASSOCIATED_PORT"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK.CLK_DOMAIN"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK.FREQ_TOLERANCE_HZ">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK.INSERT_VIP">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK.PHASE">0.0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK_OUT.ASSOCIATED_PORT"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK_OUT.ASSOCIATED_RESET"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK_OUT.CLK_DOMAIN">fpgadrv_axi_pcie_0_0_axi_aclk_out</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK_OUT.FREQ_HZ">125000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK_OUT.FREQ_TOLERANCE_HZ">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK_OUT.INSERT_VIP">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK_OUT.PHASE">0.0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.EXT_CH_GT_DRPCLK.ASSOCIATED_PORT"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.EXT_CH_GT_DRPCLK.ASSOCIATED_RESET"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.EXT_CH_GT_DRPCLK.CLK_DOMAIN"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.EXT_CH_GT_DRPCLK.FREQ_TOLERANCE_HZ">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.EXT_CH_GT_DRPCLK.INSERT_VIP">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.EXT_CH_GT_DRPCLK.PHASE">0.0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.ASSOCIATED_BUSIF"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.ASSOCIATED_PORT"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.ASSOCIATED_RESET"/>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.CLK_DOMAIN">fpgadrv_ref_clk_buf_0_0_IBUF_OUT</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.FREQ_HZ">100000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.FREQ_TOLERANCE_HZ">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.INSERT_VIP">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.PHASE">0.0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.INTERRUPT.INTERRUPT_OUT.PortWidth">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.ADDR_WIDTH">32</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.ARUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.AWUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.BUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.CLK_DOMAIN">fpgadrv_axi_pcie_0_0_axi_aclk_out</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.DATA_WIDTH">128</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.FREQ_HZ">125000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_BRESP">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_CACHE">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_LOCK">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_PROT">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_QOS">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_REGION">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_RRESP">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_WSTRB">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.ID_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.INSERT_VIP">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.MAX_BURST_LENGTH">256</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.NUM_READ_THREADS">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.NUM_WRITE_THREADS">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.PHASE">0.0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.PROTOCOL">AXI4</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.READ_WRITE_MODE">READ_WRITE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.RUSER_BITS_PER_BYTE">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.RUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.SUPPORTS_NARROW_BURST">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.WUSER_BITS_PER_BYTE">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.M_AXI.WUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.RST.AXI_ARESETN.INSERT_VIP">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.ADDR_WIDTH">32</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.ARUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.AWUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.BUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.CLK_DOMAIN">fpgadrv_axi_pcie_0_0_axi_aclk_out</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.DATA_WIDTH">128</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.FREQ_HZ">125000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_BRESP">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_BURST">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_CACHE">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_LOCK">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_PROT">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_QOS">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_REGION">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_RRESP">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_WSTRB">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.ID_WIDTH">4</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.INSERT_VIP">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.MAX_BURST_LENGTH">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.NUM_READ_THREADS">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.NUM_WRITE_THREADS">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.PHASE">0.0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.PROTOCOL">AXI4</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.READ_WRITE_MODE">READ_WRITE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.RUSER_BITS_PER_BYTE">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.RUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.SUPPORTS_NARROW_BURST">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.WUSER_BITS_PER_BYTE">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI.WUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.ADDR_WIDTH">32</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.ARUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.AWUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.BUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.CLK_DOMAIN">fpgadrv_axi_pcie_0_0_axi_aclk_out</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.DATA_WIDTH">32</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.FREQ_HZ">125000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_BRESP">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_BURST">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_CACHE">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_LOCK">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_PROT">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_QOS">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_REGION">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_RRESP">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_WSTRB">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.ID_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.INSERT_VIP">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.MAX_BURST_LENGTH">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.NUM_READ_OUTSTANDING">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.NUM_READ_THREADS">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.NUM_WRITE_OUTSTANDING">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.NUM_WRITE_THREADS">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.PHASE">0.0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.PROTOCOL">AXI4LITE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.READ_WRITE_MODE">READ_WRITE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.RUSER_BITS_PER_BYTE">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.RUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.SUPPORTS_NARROW_BURST">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.WUSER_BITS_PER_BYTE">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.WUSER_WIDTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.AXI_ACLK_LOOPBACK">FALSE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR2PCIEBAR_0">0x40000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR2PCIEBAR_1">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR2PCIEBAR_2">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR2PCIEBAR_3">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR2PCIEBAR_4">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR2PCIEBAR_5">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_0">0x70000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_1">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_2">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_3">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_4">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_5">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_AS_0">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_AS_1">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_AS_2">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_AS_3">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_AS_4">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_AS_5">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_CHK_SLV_ERR">FALSE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_HIGHADDR_0">0x7FFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_HIGHADDR_1">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_HIGHADDR_2">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_HIGHADDR_3">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_HIGHADDR_4">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_HIGHADDR_5">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_AXIBAR_NUM">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_BASEADDR">0x10000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_CLASS_CODE">0x060400</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_COMP_TIMEOUT">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_DEVICE">xc7vx485t</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_DEVICE_ID">0x7014</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_FAMILY">virtex7</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_HIGHADDR">0x13FFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_INCLUDE_BAROFFSET_REG">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_INCLUDE_RC">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_INSTANCE">fpgadrv_axi_pcie_0_0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_INTERRUPT_PIN">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_INT_FIFO_DEPTH">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_MAX_LINK_SPEED">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_MSI_DECODE_ENABLE">TRUE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_M_AXI_ADDR_WIDTH">32</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_M_AXI_DATA_WIDTH">128</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_NO_OF_LANES">4</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_NUM_MSI_REQ">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIEBAR2AXIBAR_0">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIEBAR2AXIBAR_0_SEC">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIEBAR2AXIBAR_1">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIEBAR2AXIBAR_1_SEC">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIEBAR2AXIBAR_2">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIEBAR2AXIBAR_2_SEC">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIEBAR_AS">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIEBAR_LEN_0">32</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIEBAR_LEN_1">16</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIEBAR_LEN_2">16</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIEBAR_NUM">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIE_BLK_LOCN">3</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIE_CAP_SLOT_IMPLEMENTED">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_PCIE_USE_MODE">3.0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_REF_CLK_FREQ">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_REV_ID">0x00</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_RP_BAR_HIDE">TRUE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_SLOT_CLOCK_CONFIG">TRUE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_SPEED">-2</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_SUBSYSTEM_ID">0x0007</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_SUBSYSTEM_VENDOR_ID">0x10EE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_S_AXI_ADDR_WIDTH">32</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_S_AXI_DATA_WIDTH">128</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_S_AXI_ID_WIDTH">4</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_S_AXI_SUPPORTS_NARROW_BURST">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_VENDOR_ID">0x10EE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.C_XLNX_REF_BOARD">VC707</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.ENABLE_JTAG_DBG">FALSE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.EXT_CH_GT_DRP">FALSE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.EXT_PIPE_INTERFACE">FALSE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.NO_SLV_ERR">FALSE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.PCIE_EXT_CLK">FALSE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.PCIE_EXT_GT_COMMON">FALSE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.REDUCE_OOB_FREQ">FALSE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.SHARED_LOGIC_IN_CORE">FALSE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="MODELPARAM_VALUE.TRANSCEIVER_CTRL_STATUS_PORTS">FALSE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR2PCIEBAR_0">0x40000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR2PCIEBAR_1">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR2PCIEBAR_2">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR2PCIEBAR_3">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR2PCIEBAR_4">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR2PCIEBAR_5">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_0">0x70000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_1">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_2">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_3">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_4">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_5">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_AS_0">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_AS_1">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_AS_2">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_AS_3">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_AS_4">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_AS_5">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_HIGHADDR_0">0x7FFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_HIGHADDR_1">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_HIGHADDR_2">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_HIGHADDR_3">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_HIGHADDR_4">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_HIGHADDR_5">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.AXIBAR_NUM">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BAR0_ENABLED">true</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BAR0_SCALE">Gigabytes</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BAR0_SIZE">4</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BAR0_TYPE">Memory</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BAR1_ENABLED">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BAR1_SCALE">N/A</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BAR1_SIZE">8</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BAR1_TYPE">N/A</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BAR2_ENABLED">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BAR2_SCALE">N/A</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BAR2_SIZE">8</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BAR2_TYPE">N/A</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BAR_64BIT">true</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BASEADDR">0x10000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.BASE_CLASS_MENU">Bridge_device</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.CLASS_CODE">0x060400</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.COMP_TIMEOUT">50us</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.Component_Name">fpgadrv_axi_pcie_0_0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.DEVICE_ID">0x7014</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.ENABLE_CLASS_CODE">true</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.HIGHADDR">0x13FFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.INCLUDE_BAROFFSET_REG">true</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.INCLUDE_RC">Root_Port_of_PCI_Express_Root_Complex</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.INTERRUPT_PIN">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.INT_FIFO_DEPTH">16</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.MAX_LINK_SPEED">5.0_GT/s</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.MSI_DECODE_ENABLED">true</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.M_AXI_ADDR_WIDTH">32</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.M_AXI_DATA_WIDTH">128</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.NO_OF_LANES">X4</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.NUM_MSI_REQ">0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.PCIEBAR2AXIBAR_0">0x00000000</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.PCIEBAR2AXIBAR_0_SEC">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.PCIEBAR2AXIBAR_1">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.PCIEBAR2AXIBAR_1_SEC">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.PCIEBAR2AXIBAR_2">0xFFFFFFFF</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.PCIEBAR2AXIBAR_2_SEC">1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.PCIE_BLK_LOCN">X1Y0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.PCIE_USE_MODE">GES_and_Production</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.REF_CLK_FREQ">100_MHz</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.REV_ID">0x00</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.SLOT_CLOCK_CONFIG">true</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.SUBSYSTEM_ID">0x0007</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.SUBSYSTEM_VENDOR_ID">0x10EE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.SUB_CLASS_INTERFACE_MENU">InfiniBand_to_PCI_host_bridge</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.S_AXI_ADDR_WIDTH">32</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.S_AXI_DATA_WIDTH">128</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.S_AXI_ID_WIDTH">4</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.S_AXI_SUPPORTS_NARROW_BURST">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.VENDOR_ID">0x10EE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.XLNX_REF_BOARD">VC707</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.axi_aclk_loopback">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.c_axibar_chk_slv_err">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.en_ext_ch_gt_drp">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.en_ext_clk">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.en_ext_gt_common">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.en_ext_pipe_interface">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.en_transceiver_status_ports">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.enable_jtag_dbg">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.no_slv_err">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.reduce_oob_freq">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.rp_bar_hide">true</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PARAM_VALUE.shared_logic_in_core">false</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.ARCHITECTURE">virtex7</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.BASE_BOARD_PART">xilinx.com:vc707:part0:1.4</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.BOARD_CONNECTIONS"/>
        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.DEVICE">xc7vx485t</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.PACKAGE">ffg1761</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.PREFHDL">VERILOG</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.SILICON_REVISION"/>
        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.SIMULATOR_LANGUAGE">MIXED</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.SPEEDGRADE">-2</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.STATIC_POWER"/>
        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.TEMPERATURE_GRADE"/>
        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.USE_RDI_CUSTOMIZATION">TRUE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="PROJECT_PARAM.USE_RDI_GENERATION">TRUE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.IPCONTEXT">IP_Integrator</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.IPREVISION">7</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.MANAGED">TRUE</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.OUTPUTDIR">../../../../../../vc707_hpc1.gen/sources_1/bd/fpgadrv/ip/fpgadrv_axi_pcie_0_0</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.SELECTEDSIMMODEL"/>
        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.SHAREDDIR">../../ipshared</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.SWVERSION">2022.1</spirit:configurableElementValue>
        <spirit:configurableElementValue spirit:referenceId="RUNTIME_PARAM.SYNTHESISFLOW">OUT_OF_CONTEXT</spirit:configurableElementValue>
      </spirit:configurableElementValues>
      <spirit:vendorExtensions>
        <xilinx:componentInstanceExtensions>
          <xilinx:configElementInfos>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK_OUT.ASSOCIATED_PORT" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK_OUT.ASSOCIATED_RESET" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK_OUT.CLK_DOMAIN" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK_OUT.FREQ_HZ" xilinx:valueSource="user" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK_OUT.FREQ_TOLERANCE_HZ" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.AXI_ACLK_OUT.PHASE" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK_OUT.ASSOCIATED_PORT" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK_OUT.ASSOCIATED_RESET" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK_OUT.CLK_DOMAIN" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK_OUT.FREQ_HZ" xilinx:valueSource="user" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK_OUT.FREQ_TOLERANCE_HZ" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.AXI_CTL_ACLK_OUT.PHASE" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.ASSOCIATED_BUSIF" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.ASSOCIATED_PORT" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.ASSOCIATED_RESET" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.CLK_DOMAIN" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.FREQ_HZ" xilinx:valueSource="ip_propagated" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.FREQ_TOLERANCE_HZ" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.CLK.REFCLK.PHASE" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.INTERRUPT.INTERRUPT_OUT.PortWidth" xilinx:valueSource="default_prop" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.ADDR_WIDTH" xilinx:valueSource="auto" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.ARUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.AWUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.BUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.CLK_DOMAIN" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.DATA_WIDTH" xilinx:valueSource="auto" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.FREQ_HZ" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_BRESP" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_CACHE" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_LOCK" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_PROT" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_QOS" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_REGION" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_RRESP" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.HAS_WSTRB" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.ID_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.MAX_BURST_LENGTH" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.NUM_READ_THREADS" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.NUM_WRITE_THREADS" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.PHASE" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.PROTOCOL" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.READ_WRITE_MODE" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.RUSER_BITS_PER_BYTE" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.RUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.SUPPORTS_NARROW_BURST" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.WUSER_BITS_PER_BYTE" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.M_AXI.WUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.ADDR_WIDTH" xilinx:valueSource="auto" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.ARUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.AWUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.BUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.CLK_DOMAIN" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.DATA_WIDTH" xilinx:valueSource="auto" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.FREQ_HZ" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_BRESP" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_BURST" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_CACHE" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_LOCK" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_PROT" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_QOS" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_REGION" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_RRESP" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.HAS_WSTRB" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.ID_WIDTH" xilinx:valueSource="propagated" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.MAX_BURST_LENGTH" xilinx:valueSource="ip_propagated" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.NUM_READ_THREADS" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.NUM_WRITE_THREADS" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.PHASE" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.PROTOCOL" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.READ_WRITE_MODE" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.RUSER_BITS_PER_BYTE" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.RUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.SUPPORTS_NARROW_BURST" xilinx:valueSource="ip_propagated" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.WUSER_BITS_PER_BYTE" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI.WUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.ADDR_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.ARUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.AWUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.BUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.CLK_DOMAIN" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.DATA_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.FREQ_HZ" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_BRESP" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_BURST" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_CACHE" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_LOCK" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_PROT" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_QOS" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_REGION" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_RRESP" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.HAS_WSTRB" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.ID_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.MAX_BURST_LENGTH" xilinx:valueSource="ip_propagated" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.NUM_READ_OUTSTANDING" xilinx:valueSource="ip_propagated" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.NUM_READ_THREADS" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.NUM_WRITE_OUTSTANDING" xilinx:valueSource="ip_propagated" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.NUM_WRITE_THREADS" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.PHASE" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.PROTOCOL" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.READ_WRITE_MODE" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.RUSER_BITS_PER_BYTE" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.RUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.SUPPORTS_NARROW_BURST" xilinx:valueSource="ip_propagated" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.WUSER_BITS_PER_BYTE" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="BUSIFPARAM_VALUE.S_AXI_CTL.WUSER_WIDTH" xilinx:valueSource="constant" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.AXIBAR_0" xilinx:valueSource="propagated"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.AXIBAR_HIGHADDR_0" xilinx:valueSource="propagated"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.BAR0_SCALE" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.BAR0_SIZE" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.BAR_64BIT" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.BASEADDR" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.BASE_CLASS_MENU" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.CLASS_CODE" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.DEVICE_ID" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.HIGHADDR" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.INCLUDE_RC" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.MAX_LINK_SPEED" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.M_AXI_DATA_WIDTH" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.NO_OF_LANES" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.SUB_CLASS_INTERFACE_MENU" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.S_AXI_DATA_WIDTH" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.S_AXI_ID_WIDTH" xilinx:valuePermission="bd"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.S_AXI_SUPPORTS_NARROW_BURST" xilinx:valueSource="propagated"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.XLNX_REF_BOARD" xilinx:valueSource="user"/>
            <xilinx:configElementInfo xilinx:referenceId="PARAM_VALUE.rp_bar_hide" xilinx:valueSource="user"/>
          </xilinx:configElementInfos>
          <xilinx:boundaryDescriptionInfo>
            <xilinx:boundaryDescription xilinx:boundaryDescriptionJSON="{
              &quot;schema&quot;: &quot;xilinx.com:schema:json_boundary:1.0&quot;,
              &quot;boundary&quot;: {
                &quot;ports&quot;: {
                  &quot;axi_aresetn&quot;: [ { &quot;direction&quot;: &quot;in&quot; } ],
                  &quot;user_link_up&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;axi_aclk_out&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;axi_ctl_aclk_out&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;mmcm_lock&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;driver_value&quot;: &quot;0x1&quot; } ],
                  &quot;interrupt_out&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;INTX_MSI_Request&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;INTX_MSI_Grant&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;MSI_enable&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;MSI_Vector_Num&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;4&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;00000&quot; } ],
                  &quot;MSI_Vector_Width&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;2&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;s_axi_awid&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;3&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x0&quot; } ],
                  &quot;s_axi_awaddr&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;31&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x0000&quot; } ],
                  &quot;s_axi_awregion&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;3&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x0&quot; } ],
                  &quot;s_axi_awlen&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;7&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x00&quot; } ],
                  &quot;s_axi_awsize&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;2&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;000&quot; } ],
                  &quot;s_axi_awburst&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;1&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;00&quot; } ],
                  &quot;s_axi_awvalid&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;s_axi_awready&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;s_axi_wdata&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;127&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x0000000000000000&quot; } ],
                  &quot;s_axi_wstrb&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;15&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x00&quot; } ],
                  &quot;s_axi_wlast&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;s_axi_wvalid&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;s_axi_wready&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;s_axi_bid&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;3&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;s_axi_bresp&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;1&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;s_axi_bvalid&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;s_axi_bready&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;s_axi_arid&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;3&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x0&quot; } ],
                  &quot;s_axi_araddr&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;31&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x00000000&quot; } ],
                  &quot;s_axi_arregion&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;3&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x0&quot; } ],
                  &quot;s_axi_arlen&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;7&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x00&quot; } ],
                  &quot;s_axi_arsize&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;2&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;000&quot; } ],
                  &quot;s_axi_arburst&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;1&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;00&quot; } ],
                  &quot;s_axi_arvalid&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;s_axi_arready&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;s_axi_rid&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;3&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;s_axi_rdata&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;127&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;s_axi_rresp&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;1&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;s_axi_rlast&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;s_axi_rvalid&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;s_axi_rready&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;m_axi_awaddr&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;31&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_awlen&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;7&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_awsize&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;2&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_awburst&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;1&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_awprot&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;2&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_awvalid&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;m_axi_awready&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;m_axi_awlock&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;m_axi_awcache&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;3&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_wdata&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;127&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_wstrb&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;15&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_wlast&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;m_axi_wvalid&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;m_axi_wready&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;m_axi_bresp&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;1&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;00&quot; } ],
                  &quot;m_axi_bvalid&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;m_axi_bready&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;m_axi_araddr&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;31&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_arlen&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;7&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_arsize&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;2&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_arburst&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;1&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_arprot&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;2&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_arvalid&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;m_axi_arready&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;m_axi_arlock&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;m_axi_arcache&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;3&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;m_axi_rdata&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;127&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x0000000000000000&quot; } ],
                  &quot;m_axi_rresp&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;1&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;00&quot; } ],
                  &quot;m_axi_rlast&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;m_axi_rvalid&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;m_axi_rready&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;pci_exp_txp&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;3&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;pci_exp_txn&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;3&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;pci_exp_rxp&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;3&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;pci_exp_rxn&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;3&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;REFCLK&quot;: [ { &quot;direction&quot;: &quot;in&quot; } ],
                  &quot;s_axi_ctl_awaddr&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;31&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x00000000&quot; } ],
                  &quot;s_axi_ctl_awvalid&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;s_axi_ctl_awready&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;s_axi_ctl_wdata&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;31&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x00000000&quot; } ],
                  &quot;s_axi_ctl_wstrb&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;3&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x0&quot; } ],
                  &quot;s_axi_ctl_wvalid&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;s_axi_ctl_wready&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;s_axi_ctl_bresp&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;1&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;s_axi_ctl_bvalid&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;s_axi_ctl_bready&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;s_axi_ctl_araddr&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;size_left&quot;: &quot;31&quot;, &quot;size_right&quot;: &quot;0&quot;, &quot;driver_value&quot;: &quot;0x00000000&quot; } ],
                  &quot;s_axi_ctl_arvalid&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ],
                  &quot;s_axi_ctl_arready&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;s_axi_ctl_rdata&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;31&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;s_axi_ctl_rresp&quot;: [ { &quot;direction&quot;: &quot;out&quot;, &quot;size_left&quot;: &quot;1&quot;, &quot;size_right&quot;: &quot;0&quot; } ],
                  &quot;s_axi_ctl_rvalid&quot;: [ { &quot;direction&quot;: &quot;out&quot; } ],
                  &quot;s_axi_ctl_rready&quot;: [ { &quot;direction&quot;: &quot;in&quot;, &quot;driver_value&quot;: &quot;0&quot; } ]
                },
                &quot;interfaces&quot;: {
                  &quot;M_AXI&quot;: {
                    &quot;vlnv&quot;: &quot;xilinx.com:interface:aximm:1.0&quot;,
                    &quot;abstraction_type&quot;: &quot;xilinx.com:interface:aximm_rtl:1.0&quot;,
                    &quot;mode&quot;: &quot;master&quot;,
                    &quot;address_space_ref&quot;: &quot;M_AXI&quot;,
                    &quot;parameters&quot;: {
                      &quot;NUM_READ_OUTSTANDING&quot;: [ { &quot;value&quot;: &quot;4&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;format&quot;: &quot;long&quot;, &quot;usage&quot;: &quot;all&quot; } ],
                      &quot;NUM_WRITE_OUTSTANDING&quot;: [ { &quot;value&quot;: &quot;4&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;format&quot;: &quot;long&quot;, &quot;usage&quot;: &quot;all&quot; } ],
                      &quot;HAS_BURST&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;format&quot;: &quot;long&quot;, &quot;usage&quot;: &quot;all&quot; } ],
                      &quot;HAS_BURST.VALUE_SRC&quot;: [ { &quot;value&quot;: &quot;CONSTANT&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;usage&quot;: &quot;all&quot; } ],
                      &quot;DATA_WIDTH&quot;: [ { &quot;value&quot;: &quot;128&quot;, &quot;value_src&quot;: &quot;auto&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;PROTOCOL&quot;: [ { &quot;value&quot;: &quot;AXI4&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;FREQ_HZ&quot;: [ { &quot;value&quot;: &quot;125000000&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ID_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ADDR_WIDTH&quot;: [ { &quot;value&quot;: &quot;32&quot;, &quot;value_src&quot;: &quot;auto&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;AWUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ARUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;WUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;RUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;BUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;READ_WRITE_MODE&quot;: [ { &quot;value&quot;: &quot;READ_WRITE&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_LOCK&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_PROT&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_CACHE&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_QOS&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_REGION&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_WSTRB&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_BRESP&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_RRESP&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;SUPPORTS_NARROW_BURST&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;MAX_BURST_LENGTH&quot;: [ { &quot;value&quot;: &quot;256&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;PHASE&quot;: [ { &quot;value&quot;: &quot;0.0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;float&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;CLK_DOMAIN&quot;: [ { &quot;value&quot;: &quot;fpgadrv_axi_pcie_0_0_axi_aclk_out&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;NUM_READ_THREADS&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;NUM_WRITE_THREADS&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;RUSER_BITS_PER_BYTE&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;WUSER_BITS_PER_BYTE&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;INSERT_VIP&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;resolve_type&quot;: &quot;user&quot;, &quot;format&quot;: &quot;long&quot;, &quot;usage&quot;: &quot;simulation.rtl&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ]
                    },
                    &quot;port_maps&quot;: {
                      &quot;ARADDR&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_araddr&quot; } ],
                      &quot;ARBURST&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_arburst&quot; } ],
                      &quot;ARCACHE&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_arcache&quot; } ],
                      &quot;ARLEN&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_arlen&quot; } ],
                      &quot;ARLOCK&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_arlock&quot; } ],
                      &quot;ARPROT&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_arprot&quot; } ],
                      &quot;ARREADY&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_arready&quot; } ],
                      &quot;ARSIZE&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_arsize&quot; } ],
                      &quot;ARVALID&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_arvalid&quot; } ],
                      &quot;AWADDR&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_awaddr&quot; } ],
                      &quot;AWBURST&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_awburst&quot; } ],
                      &quot;AWCACHE&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_awcache&quot; } ],
                      &quot;AWLEN&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_awlen&quot; } ],
                      &quot;AWLOCK&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_awlock&quot; } ],
                      &quot;AWPROT&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_awprot&quot; } ],
                      &quot;AWREADY&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_awready&quot; } ],
                      &quot;AWSIZE&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_awsize&quot; } ],
                      &quot;AWVALID&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_awvalid&quot; } ],
                      &quot;BREADY&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_bready&quot; } ],
                      &quot;BRESP&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_bresp&quot; } ],
                      &quot;BVALID&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_bvalid&quot; } ],
                      &quot;RDATA&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_rdata&quot; } ],
                      &quot;RLAST&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_rlast&quot; } ],
                      &quot;RREADY&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_rready&quot; } ],
                      &quot;RRESP&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_rresp&quot; } ],
                      &quot;RVALID&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_rvalid&quot; } ],
                      &quot;WDATA&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_wdata&quot; } ],
                      &quot;WLAST&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_wlast&quot; } ],
                      &quot;WREADY&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_wready&quot; } ],
                      &quot;WSTRB&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_wstrb&quot; } ],
                      &quot;WVALID&quot;: [ { &quot;physical_name&quot;: &quot;m_axi_wvalid&quot; } ]
                    }
                  },
                  &quot;S_AXI&quot;: {
                    &quot;vlnv&quot;: &quot;xilinx.com:interface:aximm:1.0&quot;,
                    &quot;abstraction_type&quot;: &quot;xilinx.com:interface:aximm_rtl:1.0&quot;,
                    &quot;mode&quot;: &quot;slave&quot;,
                    &quot;memory_map_ref&quot;: &quot;S_AXI&quot;,
                    &quot;parameters&quot;: {
                      &quot;NUM_READ_OUTSTANDING&quot;: [ { &quot;value&quot;: &quot;8&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;format&quot;: &quot;long&quot;, &quot;usage&quot;: &quot;all&quot; } ],
                      &quot;NUM_WRITE_OUTSTANDING&quot;: [ { &quot;value&quot;: &quot;2&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;format&quot;: &quot;long&quot;, &quot;usage&quot;: &quot;all&quot; } ],
                      &quot;SUPPORTS_NARROW_BURST&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;ip_propagated&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;usage&quot;: &quot;all&quot; } ],
                      &quot;DATA_WIDTH&quot;: [ { &quot;value&quot;: &quot;128&quot;, &quot;value_src&quot;: &quot;auto&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;PROTOCOL&quot;: [ { &quot;value&quot;: &quot;AXI4&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;FREQ_HZ&quot;: [ { &quot;value&quot;: &quot;125000000&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ID_WIDTH&quot;: [ { &quot;value&quot;: &quot;4&quot;, &quot;value_src&quot;: &quot;propagated&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ADDR_WIDTH&quot;: [ { &quot;value&quot;: &quot;32&quot;, &quot;value_src&quot;: &quot;auto&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;AWUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ARUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;WUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;RUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;BUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;READ_WRITE_MODE&quot;: [ { &quot;value&quot;: &quot;READ_WRITE&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_BURST&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_LOCK&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_PROT&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_CACHE&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_QOS&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_REGION&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_WSTRB&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_BRESP&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_RRESP&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;MAX_BURST_LENGTH&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;ip_propagated&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;PHASE&quot;: [ { &quot;value&quot;: &quot;0.0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;float&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;CLK_DOMAIN&quot;: [ { &quot;value&quot;: &quot;fpgadrv_axi_pcie_0_0_axi_aclk_out&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;NUM_READ_THREADS&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;NUM_WRITE_THREADS&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;RUSER_BITS_PER_BYTE&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;WUSER_BITS_PER_BYTE&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;INSERT_VIP&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;resolve_type&quot;: &quot;user&quot;, &quot;format&quot;: &quot;long&quot;, &quot;usage&quot;: &quot;simulation.rtl&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ]
                    },
                    &quot;port_maps&quot;: {
                      &quot;ARADDR&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_araddr&quot; } ],
                      &quot;ARBURST&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_arburst&quot; } ],
                      &quot;ARID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_arid&quot; } ],
                      &quot;ARLEN&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_arlen&quot; } ],
                      &quot;ARREADY&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_arready&quot; } ],
                      &quot;ARREGION&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_arregion&quot; } ],
                      &quot;ARSIZE&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_arsize&quot; } ],
                      &quot;ARVALID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_arvalid&quot; } ],
                      &quot;AWADDR&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_awaddr&quot; } ],
                      &quot;AWBURST&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_awburst&quot; } ],
                      &quot;AWID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_awid&quot; } ],
                      &quot;AWLEN&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_awlen&quot; } ],
                      &quot;AWREADY&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_awready&quot; } ],
                      &quot;AWREGION&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_awregion&quot; } ],
                      &quot;AWSIZE&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_awsize&quot; } ],
                      &quot;AWVALID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_awvalid&quot; } ],
                      &quot;BID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_bid&quot; } ],
                      &quot;BREADY&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_bready&quot; } ],
                      &quot;BRESP&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_bresp&quot; } ],
                      &quot;BVALID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_bvalid&quot; } ],
                      &quot;RDATA&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_rdata&quot; } ],
                      &quot;RID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_rid&quot; } ],
                      &quot;RLAST&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_rlast&quot; } ],
                      &quot;RREADY&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_rready&quot; } ],
                      &quot;RRESP&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_rresp&quot; } ],
                      &quot;RVALID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_rvalid&quot; } ],
                      &quot;WDATA&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_wdata&quot; } ],
                      &quot;WLAST&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_wlast&quot; } ],
                      &quot;WREADY&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_wready&quot; } ],
                      &quot;WSTRB&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_wstrb&quot; } ],
                      &quot;WVALID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_wvalid&quot; } ]
                    }
                  },
                  &quot;S_AXI_CTL&quot;: {
                    &quot;vlnv&quot;: &quot;xilinx.com:interface:aximm:1.0&quot;,
                    &quot;abstraction_type&quot;: &quot;xilinx.com:interface:aximm_rtl:1.0&quot;,
                    &quot;mode&quot;: &quot;slave&quot;,
                    &quot;memory_map_ref&quot;: &quot;S_AXI_CTL&quot;,
                    &quot;parameters&quot;: {
                      &quot;DATA_WIDTH&quot;: [ { &quot;value&quot;: &quot;32&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;PROTOCOL&quot;: [ { &quot;value&quot;: &quot;AXI4LITE&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;FREQ_HZ&quot;: [ { &quot;value&quot;: &quot;125000000&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ID_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ADDR_WIDTH&quot;: [ { &quot;value&quot;: &quot;32&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;AWUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ARUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;WUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;RUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;BUSER_WIDTH&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;READ_WRITE_MODE&quot;: [ { &quot;value&quot;: &quot;READ_WRITE&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_BURST&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_LOCK&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_PROT&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_CACHE&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_QOS&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_REGION&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_WSTRB&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_BRESP&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;HAS_RRESP&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;SUPPORTS_NARROW_BURST&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_src&quot;: &quot;ip_propagated&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;NUM_READ_OUTSTANDING&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;ip_propagated&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;NUM_WRITE_OUTSTANDING&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;ip_propagated&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;MAX_BURST_LENGTH&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;ip_propagated&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;PHASE&quot;: [ { &quot;value&quot;: &quot;0.0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;float&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;CLK_DOMAIN&quot;: [ { &quot;value&quot;: &quot;fpgadrv_axi_pcie_0_0_axi_aclk_out&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;NUM_READ_THREADS&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;NUM_WRITE_THREADS&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;RUSER_BITS_PER_BYTE&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;WUSER_BITS_PER_BYTE&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;INSERT_VIP&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;resolve_type&quot;: &quot;user&quot;, &quot;format&quot;: &quot;long&quot;, &quot;usage&quot;: &quot;simulation.rtl&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ]
                    },
                    &quot;port_maps&quot;: {
                      &quot;ARADDR&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_araddr&quot; } ],
                      &quot;ARREADY&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_arready&quot; } ],
                      &quot;ARVALID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_arvalid&quot; } ],
                      &quot;AWADDR&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_awaddr&quot; } ],
                      &quot;AWREADY&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_awready&quot; } ],
                      &quot;AWVALID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_awvalid&quot; } ],
                      &quot;BREADY&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_bready&quot; } ],
                      &quot;BRESP&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_bresp&quot; } ],
                      &quot;BVALID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_bvalid&quot; } ],
                      &quot;RDATA&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_rdata&quot; } ],
                      &quot;RREADY&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_rready&quot; } ],
                      &quot;RRESP&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_rresp&quot; } ],
                      &quot;RVALID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_rvalid&quot; } ],
                      &quot;WDATA&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_wdata&quot; } ],
                      &quot;WREADY&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_wready&quot; } ],
                      &quot;WSTRB&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_wstrb&quot; } ],
                      &quot;WVALID&quot;: [ { &quot;physical_name&quot;: &quot;s_axi_ctl_wvalid&quot; } ]
                    }
                  },
                  &quot;CLK.axi_aclk_out&quot;: {
                    &quot;vlnv&quot;: &quot;xilinx.com:signal:clock:1.0&quot;,
                    &quot;abstraction_type&quot;: &quot;xilinx.com:signal:clock_rtl:1.0&quot;,
                    &quot;mode&quot;: &quot;master&quot;,
                    &quot;parameters&quot;: {
                      &quot;ASSOCIATED_BUSIF&quot;: [ { &quot;value&quot;: &quot;M_AXI:S_AXI&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;usage&quot;: &quot;all&quot; } ],
                      &quot;FREQ_HZ&quot;: [ { &quot;value&quot;: &quot;125000000&quot;, &quot;value_src&quot;: &quot;user&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;usage&quot;: &quot;all&quot; } ],
                      &quot;FREQ_TOLERANCE_HZ&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;PHASE&quot;: [ { &quot;value&quot;: &quot;0.0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;float&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;CLK_DOMAIN&quot;: [ { &quot;value&quot;: &quot;fpgadrv_axi_pcie_0_0_axi_aclk_out&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ASSOCIATED_PORT&quot;: [ { &quot;value&quot;: &quot;&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ASSOCIATED_RESET&quot;: [ { &quot;value&quot;: &quot;&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;INSERT_VIP&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;resolve_type&quot;: &quot;user&quot;, &quot;format&quot;: &quot;long&quot;, &quot;usage&quot;: &quot;simulation.rtl&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ]
                    },
                    &quot;port_maps&quot;: {
                      &quot;CLK&quot;: [ { &quot;physical_name&quot;: &quot;axi_aclk_out&quot; } ]
                    }
                  },
                  &quot;RST.axi_aresetn&quot;: {
                    &quot;vlnv&quot;: &quot;xilinx.com:signal:reset:1.0&quot;,
                    &quot;abstraction_type&quot;: &quot;xilinx.com:signal:reset_rtl:1.0&quot;,
                    &quot;mode&quot;: &quot;slave&quot;,
                    &quot;parameters&quot;: {
                      &quot;POLARITY&quot;: [ { &quot;value&quot;: &quot;ACTIVE_LOW&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;usage&quot;: &quot;all&quot; } ],
                      &quot;INSERT_VIP&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;resolve_type&quot;: &quot;user&quot;, &quot;format&quot;: &quot;long&quot;, &quot;usage&quot;: &quot;simulation.rtl&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ]
                    },
                    &quot;port_maps&quot;: {
                      &quot;RST&quot;: [ { &quot;physical_name&quot;: &quot;axi_aresetn&quot; } ]
                    }
                  },
                  &quot;CLK.axi_ctl_aclk_out&quot;: {
                    &quot;vlnv&quot;: &quot;xilinx.com:signal:clock:1.0&quot;,
                    &quot;abstraction_type&quot;: &quot;xilinx.com:signal:clock_rtl:1.0&quot;,
                    &quot;mode&quot;: &quot;master&quot;,
                    &quot;parameters&quot;: {
                      &quot;ASSOCIATED_BUSIF&quot;: [ { &quot;value&quot;: &quot;S_AXI_CTL&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;usage&quot;: &quot;all&quot; } ],
                      &quot;FREQ_HZ&quot;: [ { &quot;value&quot;: &quot;125000000&quot;, &quot;value_src&quot;: &quot;user&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;usage&quot;: &quot;all&quot; } ],
                      &quot;FREQ_TOLERANCE_HZ&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;PHASE&quot;: [ { &quot;value&quot;: &quot;0.0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;float&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;CLK_DOMAIN&quot;: [ { &quot;value&quot;: &quot;fpgadrv_axi_pcie_0_0_axi_aclk_out&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ASSOCIATED_PORT&quot;: [ { &quot;value&quot;: &quot;&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ASSOCIATED_RESET&quot;: [ { &quot;value&quot;: &quot;&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;INSERT_VIP&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;resolve_type&quot;: &quot;user&quot;, &quot;format&quot;: &quot;long&quot;, &quot;usage&quot;: &quot;simulation.rtl&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ]
                    },
                    &quot;port_maps&quot;: {
                      &quot;CLK&quot;: [ { &quot;physical_name&quot;: &quot;axi_ctl_aclk_out&quot; } ]
                    }
                  },
                  &quot;INTERRUPT.interrupt_out&quot;: {
                    &quot;vlnv&quot;: &quot;xilinx.com:signal:interrupt:1.0&quot;,
                    &quot;abstraction_type&quot;: &quot;xilinx.com:signal:interrupt_rtl:1.0&quot;,
                    &quot;mode&quot;: &quot;master&quot;,
                    &quot;parameters&quot;: {
                      &quot;SENSITIVITY&quot;: [ { &quot;value&quot;: &quot;LEVEL_HIGH&quot;, &quot;value_src&quot;: &quot;constant&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;usage&quot;: &quot;all&quot; } ],
                      &quot;PortWidth&quot;: [ { &quot;value&quot;: &quot;1&quot;, &quot;value_src&quot;: &quot;default_prop&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ]
                    },
                    &quot;port_maps&quot;: {
                      &quot;INTERRUPT&quot;: [ { &quot;physical_name&quot;: &quot;interrupt_out&quot; } ]
                    }
                  },
                  &quot;CLK.REFCLK&quot;: {
                    &quot;vlnv&quot;: &quot;xilinx.com:signal:clock:1.0&quot;,
                    &quot;abstraction_type&quot;: &quot;xilinx.com:signal:clock_rtl:1.0&quot;,
                    &quot;mode&quot;: &quot;slave&quot;,
                    &quot;parameters&quot;: {
                      &quot;FREQ_HZ&quot;: [ { &quot;value&quot;: &quot;100000000&quot;, &quot;value_src&quot;: &quot;ip_propagated&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;FREQ_TOLERANCE_HZ&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;long&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;PHASE&quot;: [ { &quot;value&quot;: &quot;0.0&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;format&quot;: &quot;float&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;CLK_DOMAIN&quot;: [ { &quot;value&quot;: &quot;fpgadrv_ref_clk_buf_0_0_IBUF_OUT&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ASSOCIATED_BUSIF&quot;: [ { &quot;value&quot;: &quot;&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ASSOCIATED_PORT&quot;: [ { &quot;value&quot;: &quot;&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;ASSOCIATED_RESET&quot;: [ { &quot;value&quot;: &quot;&quot;, &quot;value_permission&quot;: &quot;bd&quot;, &quot;resolve_type&quot;: &quot;generated&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ],
                      &quot;INSERT_VIP&quot;: [ { &quot;value&quot;: &quot;0&quot;, &quot;resolve_type&quot;: &quot;user&quot;, &quot;format&quot;: &quot;long&quot;, &quot;usage&quot;: &quot;simulation.rtl&quot;, &quot;is_ips_inferred&quot;: true, &quot;is_static_object&quot;: false } ]
                    },
                    &quot;port_maps&quot;: {
                      &quot;CLK&quot;: [ { &quot;physical_name&quot;: &quot;REFCLK&quot; } ]
                    }
                  },
                  &quot;pcie_7x_mgt&quot;: {
                    &quot;vlnv&quot;: &quot;xilinx.com:interface:pcie_7x_mgt:1.0&quot;,
                    &quot;abstraction_type&quot;: &quot;xilinx.com:interface:pcie_7x_mgt_rtl:1.0&quot;,
                    &quot;mode&quot;: &quot;master&quot;,
                    &quot;port_maps&quot;: {
                      &quot;rxn&quot;: [ { &quot;physical_name&quot;: &quot;pci_exp_rxn&quot; } ],
                      &quot;rxp&quot;: [ { &quot;physical_name&quot;: &quot;pci_exp_rxp&quot; } ],
                      &quot;txn&quot;: [ { &quot;physical_name&quot;: &quot;pci_exp_txn&quot; } ],
                      &quot;txp&quot;: [ { &quot;physical_name&quot;: &quot;pci_exp_txp&quot; } ]
                    }
                  }
                },
                &quot;address_spaces&quot;: {
                  &quot;M_AXI&quot;: {
                    &quot;range&quot;: &quot;4G&quot;,
                    &quot;width&quot;: &quot;32&quot;
                  }
                },
                &quot;memory_maps&quot;: {
                  &quot;S_AXI_CTL&quot;: {
                    &quot;address_blocks&quot;: {
                      &quot;CTL0&quot;: {
                        &quot;base_address&quot;: &quot;0&quot;,
                        &quot;range&quot;: &quot;256M&quot;,
                        &quot;usage&quot;: &quot;memory&quot;,
                        &quot;access&quot;: &quot;read-write&quot;,
                        &quot;parameters&quot;: {
                          &quot;OFFSET_BASE_PARAM&quot;: [ { &quot;value&quot;: &quot;BASEADDR&quot; } ],
                          &quot;OFFSET_HIGH_PARAM&quot;: [ { &quot;value&quot;: &quot;HIGHADDR&quot; } ]
                        },
                        &quot;registers&quot;: {
                          &quot;PCIe_cfg_space_header&quot;: {
                            &quot;address_offset&quot;: &quot;0x000&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;PCIe cfg space header&quot;,
                            &quot;description&quot;: &quot;Accessing The PCIe configuring space,&quot;,
                            &quot;access&quot;: &quot;read-only&quot;
                          },
                          &quot;VSEC_Capability_Register&quot;: {
                            &quot;address_offset&quot;: &quot;0x128&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;VSEC Capability Register&quot;,
                            &quot;description&quot;: &quot;Provides capability ID version and next capability Offset,&quot;,
                            &quot;access&quot;: &quot;read-only&quot;,
                            &quot;fields&quot;: {
                              &quot;VSEC_Capability_ID&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 16,
                                &quot;display_name&quot;: &quot;VSEC Capability ID&quot;,
                                &quot;description&quot;: &quot;PCI-SIG Defined ID identitfying this enhanced capability as a vendor-specific capability. Hardcoded to 0x000B.\n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Capability_Version&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 4,
                                &quot;display_name&quot;: &quot;Capability Version&quot;,
                                &quot;description&quot;: &quot;Version of this capability structure. Hardcoded to 0x1.\n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Next_Capability_Offset&quot;: {
                                &quot;bit_offset&quot;: 20,
                                &quot;bit_width&quot;: 12,
                                &quot;display_name&quot;: &quot;Next Capability Offset&quot;,
                                &quot;description&quot;: &quot;Offset to next capability. Hardcoded to 0x0200.\n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              }
                            }
                          },
                          &quot;VSEC_Header_Register&quot;: {
                            &quot;address_offset&quot;: &quot;0x12C&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;VSEC Header Register&quot;,
                            &quot;description&quot;: &quot;Provides unique identifier for the layout and contents of the VSEC structure, as its revision and length.&quot;,
                            &quot;access&quot;: &quot;read-only&quot;,
                            &quot;fields&quot;: {
                              &quot;VSEC_ID&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 16,
                                &quot;display_name&quot;: &quot;VSEC ID&quot;,
                                &quot;description&quot;: &quot;ID value uniquely identifying the nature and format of this VSEC structure. Hardcoded to 0x0001.\n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;VSEC_REV&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 4,
                                &quot;display_name&quot;: &quot;VSEC Revision&quot;,
                                &quot;description&quot;: &quot;Version of this this capability structure. Hardcoded to 0x0.\n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;VSEC_Length&quot;: {
                                &quot;bit_offset&quot;: 20,
                                &quot;bit_width&quot;: 12,
                                &quot;display_name&quot;: &quot;VSEC Length&quot;,
                                &quot;description&quot;: &quot;Length of the entire VSEC capability structure, in bytes, including the VSEC capability register.  Hardcoded to 0x038.\n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              }
                            }
                          },
                          &quot;Bridge_info&quot;: {
                            &quot;address_offset&quot;: &quot;0x130&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;Bridge info&quot;,
                            &quot;description&quot;: &quot;Provides general configuration information about AXI4-Stream Bridge.&quot;,
                            &quot;access&quot;: &quot;read-only&quot;,
                            &quot;fields&quot;: {
                              &quot;gen2_capable&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;gen2 capable&quot;,
                                &quot;description&quot;: &quot;If set, underlying integrated block supports GEN2 speed\n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;root_port_present&quot;: {
                                &quot;bit_offset&quot;: 1,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;root port present&quot;,
                                &quot;description&quot;: &quot;Indicates the underlying integrated block is a Root Port when this bit is set.\n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;up_config_capable&quot;: {
                                &quot;bit_offset&quot;: 3,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Up config capable&quot;,
                                &quot;description&quot;: &quot;Indicates the underlying integrated block is capable when this bit is set.\n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;ECAM_size&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 3,
                                &quot;display_name&quot;: &quot;ECAM size&quot;,
                                &quot;description&quot;: &quot;Size of the Enhanced configuration Access Mechanism (ECAM) Bus Number field, in number of bits. If ECAM window is present, value is between 1 and 8. if not present, value is 0.&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              }
                            }
                          },
                          &quot;Bridge_status_control&quot;: {
                            &quot;address_offset&quot;: &quot;0x134&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;Bridge status and control&quot;,
                            &quot;description&quot;: &quot;Provides info how read and writes to the core config access aperture are handled&quot;,
                            &quot;access&quot;: &quot;read-only&quot;,
                            &quot;fields&quot;: {
                              &quot;ECAM_Busy&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;ECAM Busy&quot;,
                                &quot;description&quot;: &quot;Indicates an ECAM access is in progress. This bit is tied to 0.&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;global_disable&quot;: {
                                &quot;bit_offset&quot;: 8,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;global disable&quot;,
                                &quot;description&quot;: &quot;when set disables interrupts line from being asserted. doesn&apos;t prevents bits in interrupt decode register from being set.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Read_Write_1_to_clear_as_Read_Write&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;RW1C as RW&quot;,
                                &quot;description&quot;: &quot;When set, allows writing to the core registers which are normally Read and Write 1 to clear.&quot;,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Read_only_as_Read_Write&quot;: {
                                &quot;bit_offset&quot;: 17,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;RO as RW&quot;,
                                &quot;description&quot;: &quot;When set, allows writing to the certain registers which are normally Read only. only for 7 series and zynq-7000 device cores.&quot;,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;interrupt_decode_register&quot;: {
                            &quot;address_offset&quot;: &quot;0x138&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;interrupt decode register&quot;,
                            &quot;description&quot;: &quot;provide info where Host processor ISR can determine what cause interrupt to be asserted and how to clear it.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Link_down&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Link down&quot;,
                                &quot;description&quot;: &quot;show link-up on PCIe Link was lost. not asserted unless linkup had previously been seen.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;ECRC_Error&quot;: {
                                &quot;bit_offset&quot;: 1,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;ECRC Error&quot;,
                                &quot;description&quot;: &quot;Indicates the received packet failed the ECRC check.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Straming_Error&quot;: {
                                &quot;bit_offset&quot;: 2,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Streaming Error&quot;,
                                &quot;description&quot;: &quot;Indicates a gap was encountered in a streamed packet on the Tx interface.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Hot_Reset&quot;: {
                                &quot;bit_offset&quot;: 3,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Hot Reset&quot;,
                                &quot;description&quot;: &quot;indicates a hot reset was detected.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Cfg_Completion_Status&quot;: {
                                &quot;bit_offset&quot;: 5,
                                &quot;bit_width&quot;: 3,
                                &quot;display_name&quot;: &quot;Cfg Completion Status&quot;,
                                &quot;description&quot;: &quot;indicates Cfg Completion Status.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Cfg_Timeout&quot;: {
                                &quot;bit_offset&quot;: 8,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Cfg timeout&quot;,
                                &quot;description&quot;: &quot;indicates timeout on an ECAM mechanism access. applicable for RP only.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Correctable&quot;: {
                                &quot;bit_offset&quot;: 9,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Correctable&quot;,
                                &quot;description&quot;: &quot;indicates correctable error msg was received. Applicable for RP only\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Non_Fatal&quot;: {
                                &quot;bit_offset&quot;: 10,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Non Fatal&quot;,
                                &quot;description&quot;: &quot;indicates Non-Fatal error msg was received. Applicable for RP only\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Fatal&quot;: {
                                &quot;bit_offset&quot;: 11,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Fatal&quot;,
                                &quot;description&quot;: &quot;indicates Fatal error msg was received. Applicable for RP only\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Intx_interrupt_received&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Intx interrupt received&quot;,
                                &quot;description&quot;: &quot;indicates Intx interrupt was received. Applicable for RP only\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;MSI_interrupt_received&quot;: {
                                &quot;bit_offset&quot;: 17,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;MSI interrupt received&quot;,
                                &quot;description&quot;: &quot;indicates MSI(x) interrupt was received. Applicable for RP only\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Slave_Unsupported_request&quot;: {
                                &quot;bit_offset&quot;: 20,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Slave Unsupported request&quot;,
                                &quot;description&quot;: &quot;indicates that a completion TLP was received with status 0b001- unsupported request.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Slave_Unexpected_completion&quot;: {
                                &quot;bit_offset&quot;: 21,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Slave Unexpected completion&quot;,
                                &quot;description&quot;: &quot;indicates that a completion TLP was received that was unexpected.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Slave_Completion_timeout&quot;: {
                                &quot;bit_offset&quot;: 22,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Slave Completion timeout&quot;,
                                &quot;description&quot;: &quot;indicates that a completion TLP for a read request for PCIe was not returned within C_COMP_TIMEOUT parameter.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Slave_Error_poison&quot;: {
                                &quot;bit_offset&quot;: 23,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Slave Error Poison&quot;,
                                &quot;description&quot;: &quot;indicates that error poison[EP] bit was set in a completion TLP.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Slave_completer_abort&quot;: {
                                &quot;bit_offset&quot;: 24,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Slave completer abort&quot;,
                                &quot;description&quot;: &quot;indicates that  completion TLP was received with status of 0b100-completer abort.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Slave_Illegal_burst&quot;: {
                                &quot;bit_offset&quot;: 25,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Slave Illegal Burst&quot;,
                                &quot;description&quot;: &quot;indicates that Burst type other than INCR was requested by AXI master.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Master_Decerr&quot;: {
                                &quot;bit_offset&quot;: 26,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Master Decerr&quot;,
                                &quot;description&quot;: &quot;Indicates a Decoder Error response was received.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Master_Slverr&quot;: {
                                &quot;bit_offset&quot;: 27,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Master Slverr&quot;,
                                &quot;description&quot;: &quot;Indicates a slaveError response was received.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Master_Error_Poison&quot;: {
                                &quot;bit_offset&quot;: 28,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Master Error poison&quot;,
                                &quot;description&quot;: &quot;Indicates an EP bit was set in a Memory Write TLP from PCIe.\n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              }
                            }
                          },
                          &quot;Interrupt_mask_register&quot;: {
                            &quot;address_offset&quot;: &quot;0x13C&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;Interrupt mask register&quot;,
                            &quot;description&quot;: &quot;control whether interrupt source can cause the interrupt line to be asserted.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Link_down&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Link down&quot;,
                                &quot;description&quot;: &quot;enables interrupt for Link down events when bit is set.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;ECRC_Error&quot;: {
                                &quot;bit_offset&quot;: 1,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;ECRC Error&quot;,
                                &quot;description&quot;: &quot;Enables interrupts for ECRC Error events when bit is set. \n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Straming_Error&quot;: {
                                &quot;bit_offset&quot;: 2,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Streaming Error&quot;,
                                &quot;description&quot;: &quot;Enables interrupts for Streaming Error events when bit is set. \n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Hot_Reset&quot;: {
                                &quot;bit_offset&quot;: 3,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Hot Reset&quot;,
                                &quot;description&quot;: &quot;enables interrupt for hot reset events when bit is set[writable for EP else =0]\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Cfg_Completion_Status&quot;: {
                                &quot;bit_offset&quot;: 5,
                                &quot;bit_width&quot;: 3,
                                &quot;display_name&quot;: &quot;Cfg Completion Status&quot;,
                                &quot;description&quot;: &quot;enables interrupt for Cfg Completion Status events when bit is set[writable for RP else =0]\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Cfg_Timeout&quot;: {
                                &quot;bit_offset&quot;: 8,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Cfg timeout&quot;,
                                &quot;description&quot;: &quot;enables interrupt for cfg timeout events when bit is set[writable for RP else =0]\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Correctable&quot;: {
                                &quot;bit_offset&quot;: 9,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Correctable&quot;,
                                &quot;description&quot;: &quot;enables interrupt for correctable events when bit is set[writable for RP else =0]\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Non_Fatal&quot;: {
                                &quot;bit_offset&quot;: 10,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Non Fatal&quot;,
                                &quot;description&quot;: &quot;enables interrupt for non-fatal events when bit is set[writable for RP else =0]\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Fatal&quot;: {
                                &quot;bit_offset&quot;: 11,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Fatal&quot;,
                                &quot;description&quot;: &quot;enables interrupt for fatal events when bit is set[writable for RP else =0]\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Intx_interrupt_received&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Intx interrupt received&quot;,
                                &quot;description&quot;: &quot;enables interrupt for intx interrupt events when bit is set[writable for RP else =0]\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;MSI_interrupt_received&quot;: {
                                &quot;bit_offset&quot;: 17,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;MSI interrupt received&quot;,
                                &quot;description&quot;: &quot;enables interrupt for MSI interrupt events when bit is set[writable for RP else =0]\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Slave_Unsupported_request&quot;: {
                                &quot;bit_offset&quot;: 20,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Slave Unsupported request&quot;,
                                &quot;description&quot;: &quot;enables the slave unsupported request interrupt events when bit is set\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Slave_Unexpected_completion&quot;: {
                                &quot;bit_offset&quot;: 21,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Slave Unexpected completion&quot;,
                                &quot;description&quot;: &quot;enables the slave unexpected completion interrupt when bit is set\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Slave_Completion_timeout&quot;: {
                                &quot;bit_offset&quot;: 22,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Slave Completion timeout&quot;,
                                &quot;description&quot;: &quot;enables the slave completion timeout interrupt when bit is set\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Slave_Error_poison&quot;: {
                                &quot;bit_offset&quot;: 23,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Slave Error Poison&quot;,
                                &quot;description&quot;: &quot;enables the slave completion poison interrupt when bit is set\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Slave_completer_abort&quot;: {
                                &quot;bit_offset&quot;: 24,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Slave completer abort&quot;,
                                &quot;description&quot;: &quot;enables the slave completion abort interrupt when bit is set\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Slave_Illegal_burst&quot;: {
                                &quot;bit_offset&quot;: 25,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Slave Illegal Burst&quot;,
                                &quot;description&quot;: &quot;enables the slave illegal burst interrupt when bit is set\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Master_Decerr&quot;: {
                                &quot;bit_offset&quot;: 26,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Master Decerr&quot;,
                                &quot;description&quot;: &quot;enables a master DECERR interrupt when bit is set.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Master_Slverr&quot;: {
                                &quot;bit_offset&quot;: 27,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Master Slverr&quot;,
                                &quot;description&quot;: &quot;enables a master SLVERR interrupt when bit is set.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Master_Error_Poison&quot;: {
                                &quot;bit_offset&quot;: 27,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Master Error Poison&quot;,
                                &quot;description&quot;: &quot;Enables a master Error Poison interrupt when bit is set.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;bus_location_register&quot;: {
                            &quot;address_offset&quot;: &quot;0x140&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;bus location register&quot;,
                            &quot;description&quot;: &quot;report the busdevice and function number and the port number for PCIe port.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;function_number&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 3,
                                &quot;display_name&quot;: &quot;function number&quot;,
                                &quot;description&quot;: &quot;function number for the port for PCIe. hard wired to 0.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Device_number&quot;: {
                                &quot;bit_offset&quot;: 3,
                                &quot;bit_width&quot;: 5,
                                &quot;display_name&quot;: &quot;device number&quot;,
                                &quot;description&quot;: &quot;device number of port for pcie for EP and this is set by RP.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Bus_number&quot;: {
                                &quot;bit_offset&quot;: 8,
                                &quot;bit_width&quot;: 8,
                                &quot;display_name&quot;: &quot;Bus number&quot;,
                                &quot;description&quot;: &quot;bus number for the port for PCIe. this is set by RP.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Port_number&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 8,
                                &quot;display_name&quot;: &quot;Port number&quot;,
                                &quot;description&quot;: &quot;sets the port number field  of the link capabilities register\nEP- Read only on all devices except for Spartan-6 FPGA\nRP- Read and  writable\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;Phy_status_control_register&quot;: {
                            &quot;address_offset&quot;: &quot;0x144&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;Phy status control register&quot;,
                            &quot;description&quot;: &quot;provide the status current PHY state as well as control of speed and rate switching for gen2 capable.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Link_Rate&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Link Rate&quot;,
                                &quot;description&quot;: &quot;Reports the current link rate.\n  0 - 2.5 GT/s \n  1 - 5.0 GT/s \n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Link_Width&quot;: {
                                &quot;bit_offset&quot;: 1,
                                &quot;bit_width&quot;: 2,
                                &quot;display_name&quot;: &quot;Link Width&quot;,
                                &quot;description&quot;: &quot;Reports the current link width. 00 = x1, 01 =x2, 10 =x4, 11 =x8.  \n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Ltssm_State&quot;: {
                                &quot;bit_offset&quot;: 3,
                                &quot;bit_width&quot;: 6,
                                &quot;display_name&quot;: &quot;Ltssm State&quot;,
                                &quot;description&quot;: &quot;Report the current LTSSM state.   \n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Lane_Reversal&quot;: {
                                &quot;bit_offset&quot;: 9,
                                &quot;bit_width&quot;: 2,
                                &quot;display_name&quot;: &quot;Lane Reversal&quot;,
                                &quot;description&quot;: &quot;Report the current lane reversal mode.\n  00b - no lane reversal\n  01b - Lane 1:0 reversed\n  10b - Lane 3:0 reversed\n  11b - Lane 7:0 reversed\n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Link_Up&quot;: {
                                &quot;bit_offset&quot;: 11,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Link Up&quot;,
                                &quot;description&quot;: &quot;Reports the current PHY link up state. 1 = link up, 0 = link down  \n&quot;,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Directed_Link_Width&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 2,
                                &quot;display_name&quot;: &quot;Directed Link Width&quot;,
                                &quot;description&quot;: &quot;Specifies the completer link width for a directed link change operation. Only acted on when Directed link change specifies a width change.  00 = x1, 01 =x2, 10 =x4, 11 =x8.  \n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Directed_Link_Speed&quot;: {
                                &quot;bit_offset&quot;: 18,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Directed Link Speed&quot;,
                                &quot;description&quot;: &quot;Specifies the completer speed width for a directed link change operation. Only acted on when Directed link change specifies a width change.  0b = 2.5 GT/s, 1b = 5.0 GT/s.  \n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Directed_Link_Autonomous&quot;: {
                                &quot;bit_offset&quot;: 19,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Directed Link Autonomous&quot;,
                                &quot;description&quot;: &quot;Specifies width reliability or autonomous for a directed link change operation.  0b = Link Reliability, 1b = Autonomous.  \n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Directed_Link_Change&quot;: {
                                &quot;bit_offset&quot;: 20,
                                &quot;bit_width&quot;: 2,
                                &quot;display_name&quot;: &quot;Directed Link Change&quot;,
                                &quot;description&quot;: &quot;Directs LTSSM to initiate a link width or speed change.\n  00b - No change.\n  01b - Force link width.\n  10b - Force link speed.\n  11b - Force link width and speed. \n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;Root_Port_status_control_register&quot;: {
                            &quot;address_offset&quot;: &quot;0x148&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;Root Port status control register&quot;,
                            &quot;description&quot;: &quot;provide the access to the RP specific status and control. applicable for RP for non-RP cores it return 0 and writes are ignored.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Bridge_Enable&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Bridge Enable&quot;,
                                &quot;description&quot;: &quot;when set allows read/write to axibar. RP software nned to write 1 to this bit when enumeration is done. Bridge clear this when Link up to Link down tarnsition. Default is set to 0. \n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Error_FIFO_not_empty&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Error FIFO not empty&quot;,
                                &quot;description&quot;: &quot;Indicates that the Root port error FIFO has data to read. \n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Error_FIFO_overflow&quot;: {
                                &quot;bit_offset&quot;: 17,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Error FIFO overflow&quot;,
                                &quot;description&quot;: &quot;Indicates that the Root port error FIFO overflowed and an error msg was dropped.  writing 1 clears the overflow status.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Interrupt_FIFO_not_empty&quot;: {
                                &quot;bit_offset&quot;: 18,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Interrupt FIFO not empty&quot;,
                                &quot;description&quot;: &quot;Indicates that the Root port interrupt FIFO has data to read.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Interrupt_FIFO_overflow&quot;: {
                                &quot;bit_offset&quot;: 19,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Interrupt FIFO overflow&quot;,
                                &quot;description&quot;: &quot;Indicates that the Root port interrupt FIFO overflowed and an interrupt msg was dropped. writting 1 to clear the overflow status.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;Root_Port_MSI_base_register_1&quot;: {
                            &quot;address_offset&quot;: &quot;0x14C&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;Root Port MSI base register 1&quot;,
                            &quot;description&quot;: &quot;provide the access to the RP specific status and control. applicable for RP for non-RP cores it return 0 and writes are ignored.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;MSI_Base&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 32,
                                &quot;display_name&quot;: &quot;MSI Base&quot;,
                                &quot;description&quot;: &quot;4Kb alligned address for MSI interrupt. In case of 32 bit MSI, it returns 0 but captures upper 32 bits of the MSI address in case of 64 bit MSI. \n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;Root_Port_MSI_base_register_2&quot;: {
                            &quot;address_offset&quot;: &quot;0x150&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;Root Port MSI base register 2&quot;,
                            &quot;description&quot;: &quot;sets the address window in RP cores used for MSI interrupts. MemWr TLP to address in this range are interpreted as MSI interrupt.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;MSI_Base&quot;: {
                                &quot;bit_offset&quot;: 12,
                                &quot;bit_width&quot;: 20,
                                &quot;display_name&quot;: &quot;MSI Base&quot;,
                                &quot;description&quot;: &quot;4K alligned address for MSI interrupt.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;Root_Port_error_FIFO_read_register&quot;: {
                            &quot;address_offset&quot;: &quot;0x154&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;Root Port error FIFO read register&quot;,
                            &quot;description&quot;: &quot;reads from this location return a queued error(correctable/Non-fatal/Fatal) messages.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Requester_ID&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 16,
                                &quot;display_name&quot;: &quot;Requester ID&quot;,
                                &quot;description&quot;: &quot;Requester ID belonging to the requester of the error message\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Error_Type&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 2,
                                &quot;display_name&quot;: &quot;Error Type&quot;,
                                &quot;description&quot;: &quot;Indicates the type of error 00b: correctable, 01b: Non-fatal, 10b: Fatal.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Error_Valid&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 2,
                                &quot;display_name&quot;: &quot;Error Valid&quot;,
                                &quot;description&quot;: &quot;Indicates whether read succeeded 1b: success, 0b: no message to read.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;Root_Port_interrupt_FIFO_read_register_1&quot;: {
                            &quot;address_offset&quot;: &quot;0x158&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;Root Port interrupt FIFO read register 1&quot;,
                            &quot;description&quot;: &quot;Read from this location return queued interrupt msg. for MSI interrupt payload present in RP interrupt FIFO read 2 register.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Requester_ID&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 16,
                                &quot;display_name&quot;: &quot;Requester ID&quot;,
                                &quot;description&quot;: &quot;Requester ID belonging to the requester of the error message\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;MSI_Address&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 11,
                                &quot;display_name&quot;: &quot;MSI Address&quot;,
                                &quot;description&quot;: &quot;for MSI interrupts, contain address bits 12:2 from TLP address field.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Interrupt_Line&quot;: {
                                &quot;bit_offset&quot;: 27,
                                &quot;bit_width&quot;: 2,
                                &quot;display_name&quot;: &quot;Interrupt Line&quot;,
                                &quot;description&quot;: &quot;Indicate interrupt line is used. 00b = INTA, 01b = INTB, 10b = INTC, 11b = INTD. For MSI this field is set to 00b.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Interrupt_Assert&quot;: {
                                &quot;bit_offset&quot;: 29,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Interrupt Assert&quot;,
                                &quot;description&quot;: &quot;Interrupt Assert or deassert for INTx. 1b = assert, 0b = deassert\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;MSI_Interrupt&quot;: {
                                &quot;bit_offset&quot;: 30,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;MSI Interrupt&quot;,
                                &quot;description&quot;: &quot;indicates whether interrupt is MSI or INTx. 1b =  MSI, 0b = INTx\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              },
                              &quot;Interrupt_Valid&quot;: {
                                &quot;bit_offset&quot;: 31,
                                &quot;bit_width&quot;: 1,
                                &quot;display_name&quot;: &quot;Interrupt Valid&quot;,
                                &quot;description&quot;: &quot;indicates whether read succeeded. 1b: success, 0b: no interrupt to read\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;Root_Port_interrupt_FIFO_read_register_2&quot;: {
                            &quot;address_offset&quot;: &quot;0x15C&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;Root Port interrupt FIFO read register 2&quot;,
                            &quot;description&quot;: &quot;Read from this location return queued interrupt msg. for MSI interrupt payload present in RP in this register.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Message_Data&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 16,
                                &quot;display_name&quot;: &quot;Message Data&quot;,
                                &quot;description&quot;: &quot;payload for MSI messages\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;VSEC_Capability_register_2&quot;: {
                            &quot;address_offset&quot;: &quot;0x200&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;VSEC_Capability_register_2&quot;,
                            &quot;description&quot;: &quot;VSEC capability register allows the memory space for the core to appear as though it is part of underlying PCIe configuration space.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-only&quot;,
                            &quot;fields&quot;: {
                              &quot;VSEC_Capability_ID&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 16,
                                &quot;display_name&quot;: &quot;VSEC Capability ID&quot;,
                                &quot;description&quot;: &quot;PCI-SG defined ID identifying this enhanced capability as a Vendor-specific cabalility. HARDCODED to 0x000b\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Capability_Version&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 4,
                                &quot;display_name&quot;: &quot;Capability Version&quot;,
                                &quot;description&quot;: &quot;Version of this capability structure. HARDCODED to 0x01b\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;Next_Capability_offset&quot;: {
                                &quot;bit_offset&quot;: 20,
                                &quot;bit_width&quot;: 12,
                                &quot;display_name&quot;: &quot;Next Capability offset&quot;,
                                &quot;description&quot;: &quot;offset of next capabilties.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              }
                            }
                          },
                          &quot;VSEC_Header_register_2&quot;: {
                            &quot;address_offset&quot;: &quot;0x204&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;VSEC_Header_register_2&quot;,
                            &quot;description&quot;: &quot;provides a unique identifier for the layout and contents of the VSEC structure as well as revision and length.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-only&quot;,
                            &quot;fields&quot;: {
                              &quot;VSEC_ID&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 16,
                                &quot;display_name&quot;: &quot;VSEC Capability&quot;,
                                &quot;description&quot;: &quot;ID value identifying the nature and format of this VSEC structure.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;VSEC_REV&quot;: {
                                &quot;bit_offset&quot;: 16,
                                &quot;bit_width&quot;: 4,
                                &quot;display_name&quot;: &quot;VSEC REV&quot;,
                                &quot;description&quot;: &quot;Version of this capability structure. Hardcoded to 0x0\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              },
                              &quot;VSEC_Lenght&quot;: {
                                &quot;bit_offset&quot;: 20,
                                &quot;bit_width&quot;: 11,
                                &quot;display_name&quot;: &quot;VSEC Lenght&quot;,
                                &quot;description&quot;: &quot;Length of entire VSEC structure in bytes. Hardcoded to 0x038\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-only&quot;
                              }
                            }
                          },
                          &quot;AXIBAR2PCIEBAR_0U&quot;: {
                            &quot;address_offset&quot;: &quot;0x210&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;AXIBAR2PCIEBAR_0U&quot;,
                            &quot;description&quot;: &quot;When BAR is 64 bit address space, then most significant 32 bits are written into it for BAR 1.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Upper_Address&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 32,
                                &quot;display_name&quot;: &quot;Upper Address&quot;,
                                &quot;description&quot;: &quot;To create address for PCIe- this is the value substituted for the most significant 32 bits for the AXI address.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;AXIBAR2PCIEBAR_0L&quot;: {
                            &quot;address_offset&quot;: &quot;0x214&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;AXIBAR2PCIEBAR_0L&quot;,
                            &quot;description&quot;: &quot;When BAR is 32 bit address space, then address translation vector is placed nto it for BAR 1.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Lower_Address&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 32,
                                &quot;display_name&quot;: &quot;Lower Address&quot;,
                                &quot;description&quot;: &quot;To create address for PCIe- this is the value substituted for the least significant 32 bits for the AXI address.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;AXIBAR2PCIEBAR_2U&quot;: {
                            &quot;address_offset&quot;: &quot;0x218&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;AXIBAR2PCIEBAR_2U&quot;,
                            &quot;description&quot;: &quot;When BAR is 64 bit address space, then most significant 32 bits are written into it for BAR 2.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Upper_Address&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 32,
                                &quot;display_name&quot;: &quot;Upper Address&quot;,
                                &quot;description&quot;: &quot;To create address for PCIe- this is the value substituted for the most significant 32 bits for the AXI address.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;AXIBAR2PCIEBAR_2L&quot;: {
                            &quot;address_offset&quot;: &quot;0x21C&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;AXIBAR2PCIEBAR_2L&quot;,
                            &quot;description&quot;: &quot;When BAR is 32 bit address space, then address translation vector is placed nto it for BAR 2.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Lower_Address&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 32,
                                &quot;display_name&quot;: &quot;Lower Address&quot;,
                                &quot;description&quot;: &quot;To create address for PCIe- this is the value substituted for the least significant 32 bits for the AXI address.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;AXIBAR2PCIEBAR_3U&quot;: {
                            &quot;address_offset&quot;: &quot;0x220&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;AXIBAR2PCIEBAR_3U&quot;,
                            &quot;description&quot;: &quot;When BAR is 64 bit address space, then most significant 32 bits are written into it for BAR 3.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Upper_Address&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 32,
                                &quot;display_name&quot;: &quot;Upper Address&quot;,
                                &quot;description&quot;: &quot;To create address for PCIe- this is the value substituted for the most significant 32 bits for the AXI address.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;AXIBAR2PCIEBAR_3L&quot;: {
                            &quot;address_offset&quot;: &quot;0x224&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;AXIBAR2PCIEBAR_3L&quot;,
                            &quot;description&quot;: &quot;When BAR is 32 bit address space, then address translation vector is placed nto it for BAR 3.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Lower_Address&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 32,
                                &quot;display_name&quot;: &quot;Lower Address&quot;,
                                &quot;description&quot;: &quot;To create address for PCIe- this is the value substituted for the least significant 32 bits for the AXI address.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;AXIBAR2PCIEBAR_4U&quot;: {
                            &quot;address_offset&quot;: &quot;0x228&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;AXIBAR2PCIEBAR_4U&quot;,
                            &quot;description&quot;: &quot;When BAR is 64 bit address space, then most significant 32 bits are written into it for BAR 4.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Upper_Address&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 32,
                                &quot;display_name&quot;: &quot;Upper Address&quot;,
                                &quot;description&quot;: &quot;To create address for PCIe- this is the value substituted for the most significant 32 bits for the AXI address.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;AXIBAR2PCIEBAR_4L&quot;: {
                            &quot;address_offset&quot;: &quot;0x22C&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;AXIBAR2PCIEBAR_4L&quot;,
                            &quot;description&quot;: &quot;When BAR is 32 bit address space, then address translation vector is placed nto it for BAR 4.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Lower_Address&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 32,
                                &quot;display_name&quot;: &quot;Lower Address&quot;,
                                &quot;description&quot;: &quot;To create address for PCIe- this is the value substituted for the least significant 32 bits for the AXI address.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;AXIBAR2PCIEBAR_5U&quot;: {
                            &quot;address_offset&quot;: &quot;0x230&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;AXIBAR2PCIEBAR_5U&quot;,
                            &quot;description&quot;: &quot;When BAR is 64 bit address space, then most significant 32 bits are written into it for BAR 5.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Upper_Address&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 32,
                                &quot;display_name&quot;: &quot;Upper Address&quot;,
                                &quot;description&quot;: &quot;To create address for PCIe- this is the value substituted for the most significant 32 bits for the AXI address.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          },
                          &quot;AXIBAR2PCIEBAR_5L&quot;: {
                            &quot;address_offset&quot;: &quot;0x234&quot;,
                            &quot;size&quot;: 32,
                            &quot;display_name&quot;: &quot;AXIBAR2PCIEBAR_5L&quot;,
                            &quot;description&quot;: &quot;When BAR is 32 bit address space, then address translation vector is placed nto it for BAR 5.&quot;,
                            &quot;is_volatile&quot;: true,
                            &quot;access&quot;: &quot;read-write&quot;,
                            &quot;fields&quot;: {
                              &quot;Lower_Address&quot;: {
                                &quot;bit_offset&quot;: 0,
                                &quot;bit_width&quot;: 32,
                                &quot;display_name&quot;: &quot;Lower Address&quot;,
                                &quot;description&quot;: &quot;To create address for PCIe- this is the value substituted for the least significant 32 bits for the AXI address.\n&quot;,
                                &quot;is_volatile&quot;: true,
                                &quot;access&quot;: &quot;read-write&quot;
                              }
                            }
                          }
                        }
                      }
                    }
                  },
                  &quot;S_AXI&quot;: {
                    &quot;address_blocks&quot;: {
                      &quot;BAR0&quot;: {
                        &quot;base_address&quot;: &quot;0&quot;,
                        &quot;range&quot;: &quot;4G&quot;,
                        &quot;usage&quot;: &quot;memory&quot;,
                        &quot;access&quot;: &quot;read-write&quot;,
                        &quot;parameters&quot;: {
                          &quot;OFFSET_BASE_PARAM&quot;: [ { &quot;value&quot;: &quot;AXIBAR_0&quot; } ],
                          &quot;OFFSET_HIGH_PARAM&quot;: [ { &quot;value&quot;: &quot;AXIBAR_HIGHADDR_0&quot; } ]
                        }
                      }
                    }
                  }
                }
              }
            }"/>
          </xilinx:boundaryDescriptionInfo>
        </xilinx:componentInstanceExtensions>
      </spirit:vendorExtensions>
    </spirit:componentInstance>
  </spirit:componentInstances>
</spirit:design>
